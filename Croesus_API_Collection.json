{
  "info": {
    "name": "Croesus Microservices API Collection - Updated",
    "description": "Complete API collection for Croesus cryptocurrency trading platform microservices with improved JWT authentication, gateway routing, and enhanced user registration with firstName/lastName fields",
    "version": "2.1.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost",
      "type": "string"
    },
    {
      "key": "gateway_port",
      "value": "8080",
      "type": "string",
      "description": "API Gateway - Main entry point"
    },
    {
      "key": "user_service_port",
      "value": "8081",
      "type": "string"
    },
    {
      "key": "portfolio_service_port",
      "value": "8082",
      "type": "string"
    },
    {
      "key": "wallet_service_port",
      "value": "8083",
      "type": "string"
    },
    {
      "key": "trading_service_port",
      "value": "8084",
      "type": "string"
    },
    {
      "key": "market_service_port",
      "value": "8085",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string",
      "description": "JWT token for authentication"
    },
    {
      "key": "username",
      "value": "",
      "type": "string",
      "description": "Current user's username"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string",
      "description": "Current user's ID"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication & Authorization",
      "description": "User registration, login and JWT token management",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"password\": \"password123\",\n  \"roles\": [\"user\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}:{{gateway_port}}/api/auth/signup",
              "host": ["{{base_url}}"],
              "port": "{{gateway_port}}",
              "path": ["api", "auth", "signup"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('User registered successfully', function () {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.message).to.include('successfully');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User (Gateway)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}:{{gateway_port}}/api/auth/signin",
              "host": ["{{base_url}}"],
              "port": "{{gateway_port}}",
              "path": ["api", "auth", "signin"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jwt_token', response.token);",
                  "    pm.collectionVariables.set('username', response.username);",
                  "    pm.collectionVariables.set('user_id', response.id);",
                  "    ",
                  "    pm.test('Login successful and JWT saved', function () {",
                  "        pm.expect(response.token).to.not.be.undefined;",
                  "        pm.expect(response.token).to.have.length.above(10);",
                  "    });",
                  "    ",
                  "    pm.test('User details received', function () {",
                  "        pm.expect(response.username).to.not.be.undefined;",
                  "        pm.expect(response.id).to.not.be.undefined;",
                  "        pm.expect(response.firstName).to.not.be.undefined;",
                  "        pm.expect(response.lastName).to.not.be.undefined;",
                  "        pm.expect(response.email).to.not.be.undefined;",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User (Direct)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}:{{user_service_port}}/api/auth/signin",
              "host": ["{{base_url}}"],
              "port": "{{user_service_port}}",
              "path": ["api", "auth", "signin"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jwt_token', response.token);",
                  "    pm.collectionVariables.set('username', response.username);",
                  "    pm.collectionVariables.set('user_id', response.id);",
                  "    ",
                  "    pm.test('Login successful and JWT saved', function () {",
                  "        pm.expect(response.token).to.not.be.undefined;",
                  "        pm.expect(response.token).to.have.length.above(10);",
                  "    });",
                  "    ",
                  "    pm.test('User details received', function () {",
                  "        pm.expect(response.username).to.not.be.undefined;",
                  "        pm.expect(response.id).to.not.be.undefined;",
                  "        pm.expect(response.firstName).to.not.be.undefined;",
                  "        pm.expect(response.lastName).to.not.be.undefined;",
                  "        pm.expect(response.email).to.not.be.undefined;",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Validate JWT Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{user_service_port}}/api/users/current",
              "host": ["{{base_url}}"],
              "port": "{{user_service_port}}",
              "path": ["api", "users", "current"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('JWT token is valid', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('User authenticated successfully', function () {",
                  "        pm.expect(response.username).to.not.be.undefined;",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üë§ User Management",
      "description": "User profile and account management",
      "item": [
        {
          "name": "Get Current User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{gateway_port}}/api/users/current",
              "host": ["{{base_url}}"],
              "port": "{{gateway_port}}",
              "path": ["api", "users", "current"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User profile received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.username).to.eql(pm.collectionVariables.get('username'));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{user_service_port}}/api/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "port": "{{user_service_port}}",
              "path": ["api", "users", "{{user_id}}"]
            }
          }
        },
        {
          "name": "Get All Users (Admin Only)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{user_service_port}}/api/users",
              "host": ["{{base_url}}"],
              "port": "{{user_service_port}}",
              "path": ["api", "users"]
            }
          }
        },
        {
          "name": "Get User ID by Username (Internal)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{user_service_port}}/api/users/username/{{username}}/id",
              "host": ["{{base_url}}"],
              "port": "{{user_service_port}}",
              "path": ["api", "users", "username", "{{username}}", "id"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User ID retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const userId = pm.response.text();",
                  "    pm.expect(parseInt(userId)).to.be.a('number');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üí∞ Wallet Management",
      "description": "Wallet operations with improved JWT authentication",
      "item": [
        {
          "name": "Get Current User Wallet",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{gateway_port}}/api/wallet",
              "host": ["{{base_url}}"],
              "port": "{{gateway_port}}",
              "path": ["api", "wallet"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Wallet retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.balance).to.not.be.undefined;",
                  "    pm.expect(response.currencyCode).to.eql('USD');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Current User Balance",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{wallet_service_port}}/api/wallet/balance",
              "host": ["{{base_url}}"],
              "port": "{{wallet_service_port}}",
              "path": ["api", "wallet", "balance"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Balance retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const balance = parseFloat(pm.response.text());",
                  "    pm.expect(balance).to.be.a('number');",
                  "    pm.expect(balance).to.be.at.least(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Deposit Money",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 1000.00,\n  \"description\": \"Initial deposit via improved JWT auth\",\n  \"referenceId\": \"DEP{{$timestamp}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}:{{wallet_service_port}}/api/wallet/deposit",
              "host": ["{{base_url}}"],
              "port": "{{wallet_service_port}}",
              "path": ["api", "wallet", "deposit"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Deposit successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('successful');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Withdraw Money",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 100.00,\n  \"description\": \"Cash withdrawal\",\n  \"referenceId\": \"WIT{{$timestamp}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}:{{wallet_service_port}}/api/wallet/withdraw",
              "host": ["{{base_url}}"],
              "port": "{{wallet_service_port}}",
              "path": ["api", "wallet", "withdraw"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Withdrawal successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('successful');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Transfer Money",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"targetUserId\": 2,\n  \"amount\": 50.00,\n  \"description\": \"Transfer to friend via secure JWT\"\n}"
            },
            "url": {
              "raw": "{{base_url}}:{{wallet_service_port}}/api/wallet/transfer",
              "host": ["{{base_url}}"],
              "port": "{{wallet_service_port}}",
              "path": ["api", "wallet", "transfer"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Transfer successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('successful');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Wallet Transactions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{wallet_service_port}}/api/transactions",
              "host": ["{{base_url}}"],
              "port": "{{wallet_service_port}}",
              "path": ["api", "transactions"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Transactions retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Transaction Summary",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{wallet_service_port}}/api/transactions/summary",
              "host": ["{{base_url}}"],
              "port": "{{wallet_service_port}}",
              "path": ["api", "transactions", "summary"]
            }
          }
        }
      ]
    },
    {
      "name": "üìà Market Data & Crypto",
      "description": "Cryptocurrency market data and pricing",
      "item": [
        {
          "name": "Get All Cryptocurrencies (Gateway)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}:{{gateway_port}}/api/crypto",
              "host": ["{{base_url}}"],
              "port": "{{gateway_port}}",
              "path": ["api", "crypto"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Crypto list retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    pm.expect(response.length).to.be.above(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Cryptocurrencies (Direct)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}:{{market_service_port}}/api/crypto",
              "host": ["{{base_url}}"],
              "port": "{{market_service_port}}",
              "path": ["api", "crypto"]
            }
          }
        },
        {
          "name": "Get Crypto by Symbol",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}:{{market_service_port}}/api/crypto/bitcoin",
              "host": ["{{base_url}}"],
              "port": "{{market_service_port}}",
              "path": ["api", "crypto", "bitcoin"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Bitcoin data retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.symbol).to.eql('bitcoin');",
                  "    pm.expect(response.current_price).to.be.a('number');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Crypto Price",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}:{{market_service_port}}/api/crypto/bitcoin/price",
              "host": ["{{base_url}}"],
              "port": "{{market_service_port}}",
              "path": ["api", "crypto", "bitcoin", "price"]
            }
          }
        },
        {
          "name": "Search Cryptocurrencies",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}:{{market_service_port}}/api/crypto/search?q=bitcoin",
              "host": ["{{base_url}}"],
              "port": "{{market_service_port}}",
              "path": ["api", "crypto", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "bitcoin"
                }
              ]
            }
          }
        },
        {
          "name": "Get Top Gainers",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}:{{market_service_port}}/api/crypto/gainers",
              "host": ["{{base_url}}"],
              "port": "{{market_service_port}}",
              "path": ["api", "crypto", "gainers"]
            }
          }
        },
        {
          "name": "Get Top Losers",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}:{{market_service_port}}/api/crypto/losers",
              "host": ["{{base_url}}"],
              "port": "{{market_service_port}}",
              "path": ["api", "crypto", "losers"]
            }
          }
        }
      ]
    },
    {
      "name": "üíπ Trading Operations",
      "description": "Buy/Sell operations with secure authentication",
      "item": [
        {
          "name": "Buy Asset",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"symbol\": \"bitcoin\",\n  \"quantity\": 0.001,\n  \"description\": \"Buy Bitcoin with secure JWT\"\n}"
            },
            "url": {
              "raw": "{{base_url}}:{{trading_service_port}}/api/trade/buy",
              "host": ["{{base_url}}"],
              "port": "{{trading_service_port}}",
              "path": ["api", "trade", "buy"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Buy order successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('successful');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Sell Asset",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"symbol\": \"bitcoin\",\n  \"quantity\": 0.0005,\n  \"description\": \"Sell Bitcoin with secure JWT\"\n}"
            },
            "url": {
              "raw": "{{base_url}}:{{trading_service_port}}/api/trade/sell",
              "host": ["{{base_url}}"],
              "port": "{{trading_service_port}}",
              "path": ["api", "trade", "sell"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Sell order successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('successful');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Trading History",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{trading_service_port}}/api/transactions",
              "host": ["{{base_url}}"],
              "port": "{{trading_service_port}}",
              "path": ["api", "transactions"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Trading history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Transactions by Type",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{trading_service_port}}/api/transactions/type/BUY",
              "host": ["{{base_url}}"],
              "port": "{{trading_service_port}}",
              "path": ["api", "transactions", "type", "BUY"]
            }
          }
        },
        {
          "name": "Get Trading Summary",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{trading_service_port}}/api/transactions/summary",
              "host": ["{{base_url}}"],
              "port": "{{trading_service_port}}",
              "path": ["api", "transactions", "summary"]
            }
          }
        }
      ]
    },
    {
      "name": "üíº Portfolio Management",
      "description": "Portfolio tracking and asset management",
      "item": [
        {
          "name": "Get User Portfolio",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{portfolio_service_port}}/api/portfolio",
              "host": ["{{base_url}}"],
              "port": "{{portfolio_service_port}}",
              "path": ["api", "portfolio"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Portfolio retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Portfolio Summary",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{portfolio_service_port}}/api/portfolio/summary",
              "host": ["{{base_url}}"],
              "port": "{{portfolio_service_port}}",
              "path": ["api", "portfolio", "summary"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Portfolio summary retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.totalValue).to.be.a('number');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Assets",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}:{{portfolio_service_port}}/api/assets",
              "host": ["{{base_url}}"],
              "port": "{{portfolio_service_port}}",
              "path": ["api", "assets"]
            }
          }
        },
        {
          "name": "Get Asset by Symbol",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}:{{portfolio_service_port}}/api/assets/BTC",
              "host": ["{{base_url}}"],
              "port": "{{portfolio_service_port}}",
              "path": ["api", "assets", "BTC"]
            }
          }
        },
        {
          "name": "Update Portfolio (Manual)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": \"0.001\",\n  \"price\": \"103886.00\",\n  \"action\": \"BUY\",\n  \"assetSymbol\": \"BTC\",\n  \"assetName\": \"Bitcoin\"\n}"
            },
            "url": {
              "raw": "{{base_url}}:{{portfolio_service_port}}/api/portfolio/user/{{user_id}}/asset/1/update",
              "host": ["{{base_url}}"],
              "port": "{{portfolio_service_port}}",
              "path": ["api", "portfolio", "user", "{{user_id}}", "asset", "1", "update"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Portfolio updated successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.quantity).to.be.a('number');",
                  "    pm.expect(response.currentValue).to.be.a('number');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Portfolio by User and Asset",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{portfolio_service_port}}/api/portfolio/user/{{user_id}}/asset/1",
              "host": ["{{base_url}}"],
              "port": "{{portfolio_service_port}}",
              "path": ["api", "portfolio", "user", "{{user_id}}", "asset", "1"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Portfolio entry retrieved', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.quantity).to.be.a('number');",
                  "        pm.expect(response.asset).to.be.an('object');",
                  "    } else if (pm.response.code === 404) {",
                  "        pm.expect(true).to.be.true; // Portfolio entry not found is valid",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Portfolio by User and Symbol",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{portfolio_service_port}}/api/portfolio/user/{{user_id}}/symbol/BTC",
              "host": ["{{base_url}}"],
              "port": "{{portfolio_service_port}}",
              "path": ["api", "portfolio", "user", "{{user_id}}", "symbol", "BTC"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Portfolio entry retrieved by symbol', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.quantity).to.be.a('number');",
                  "        pm.expect(response.asset).to.be.an('object');",
                  "        pm.expect(response.asset.symbol).to.eql('BTC');",
                  "    } else if (pm.response.code === 404) {",
                  "        pm.expect(true).to.be.true; // Portfolio entry not found is valid",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Asset ID by Symbol",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{portfolio_service_port}}/api/portfolio/asset/symbol/BTC",
              "host": ["{{base_url}}"],
              "port": "{{portfolio_service_port}}",
              "path": ["api", "portfolio", "asset", "symbol", "BTC"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Asset ID retrieved by symbol', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.id).to.be.a('number');",
                  "        console.log('Asset ID for BTC:', response.id);",
                  "    } else if (pm.response.code === 404) {",
                  "        console.log('Asset not found for symbol BTC');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üåê API Gateway Routes",
      "description": "Gateway routing tests and health checks",
      "item": [
        {
          "name": "Gateway Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}:{{gateway_port}}/actuator/health",
              "host": ["{{base_url}}"],
              "port": "{{gateway_port}}",
              "path": ["actuator", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Gateway is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('UP');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Gateway Route - User Service",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{gateway_port}}/api/users/current",
              "host": ["{{base_url}}"],
              "port": "{{gateway_port}}",
              "path": ["api", "users", "current"]
            }
          }
        },
        {
          "name": "Gateway Route - Wallet Service",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}:{{gateway_port}}/api/wallet",
              "host": ["{{base_url}}"],
              "port": "{{gateway_port}}",
              "path": ["api", "wallet"]
            }
          }
        },
        {
          "name": "Gateway Route - Market Service",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}:{{gateway_port}}/api/crypto",
              "host": ["{{base_url}}"],
              "port": "{{gateway_port}}",
              "path": ["api", "crypto"]
            }
          }
        }
      ]
    },
    {
      "name": "üîß Health & Monitoring",
      "description": "Service health checks and monitoring endpoints",
      "item": [
        {
          "name": "User Service Health",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}:{{user_service_port}}/actuator/health",
              "host": ["{{base_url}}"],
              "port": "{{user_service_port}}",
              "path": ["actuator", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User Service is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('UP');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Wallet Service Health",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}:{{wallet_service_port}}/actuator/health",
              "host": ["{{base_url}}"],
              "port": "{{wallet_service_port}}",
              "path": ["actuator", "health"]
            }
          }
        },
        {
          "name": "Portfolio Service Health",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}:{{portfolio_service_port}}/actuator/health",
              "host": ["{{base_url}}"],
              "port": "{{portfolio_service_port}}",
              "path": ["actuator", "health"]
            }
          }
        },
        {
          "name": "Trading Service Health",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}:{{trading_service_port}}/actuator/health",
              "host": ["{{base_url}}"],
              "port": "{{trading_service_port}}",
              "path": ["actuator", "health"]
            }
          }
        },
        {
          "name": "Market Service Health",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}:{{market_service_port}}/actuator/health",
              "host": ["{{base_url}}"],
              "port": "{{market_service_port}}",
              "path": ["actuator", "health"]
            }
          }
        }
      ]
    },
    {
      "name": "üß™ Testing Scenarios",
      "description": "Complete user flow testing scenarios",
      "item": [
        {
          "name": "Complete User Journey Test",
          "item": [
            {
              "name": "1. Register New User",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"journey_user_{{$timestamp}}\",\n  \"email\": \"journey{{$timestamp}}@example.com\",\n  \"password\": \"password123\",\n  \"fullName\": \"Journey Test User\",\n  \"roles\": [\"user\"]\n}"
                },
                "url": {
                  "raw": "{{base_url}}:{{gateway_port}}/api/auth/signup",
                  "host": ["{{base_url}}"],
                  "port": "{{gateway_port}}",
                  "path": ["api", "auth", "signup"]
                }
              }
            },
            {
              "name": "2. Login User",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"journey_user_{{$timestamp}}\",\n  \"password\": \"password123\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}:{{gateway_port}}/api/auth/signin",
                  "host": ["{{base_url}}"],
                  "port": "{{gateway_port}}",
                  "path": ["api", "auth", "signin"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('jwt_token', response.accessToken);",
                      "    pm.collectionVariables.set('username', response.username);",
                      "    pm.collectionVariables.set('user_id', response.id);",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "3. Get Wallet",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}:{{wallet_service_port}}/api/wallet",
                  "host": ["{{base_url}}"],
                  "port": "{{wallet_service_port}}",
                  "path": ["api", "wallet"]
                }
              }
            },
            {
              "name": "4. Deposit Money",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"amount\": 5000.00,\n  \"description\": \"Journey test deposit\",\n  \"referenceId\": \"JOURNEY_{{$timestamp}}\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}:{{wallet_service_port}}/api/wallet/deposit",
                  "host": ["{{base_url}}"],
                  "port": "{{wallet_service_port}}",
                  "path": ["api", "wallet", "deposit"]
                }
              }
            },
            {
              "name": "5. Buy Crypto",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"symbol\": \"bitcoin\",\n  \"quantity\": 0.01,\n  \"description\": \"Journey test purchase\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}:{{trading_service_port}}/api/trade/buy",
                  "host": ["{{base_url}}"],
                  "port": "{{trading_service_port}}",
                  "path": ["api", "trade", "buy"]
                }
              }
            },
            {
              "name": "6. Check Portfolio",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}:{{portfolio_service_port}}/api/portfolio/summary",
                  "host": ["{{base_url}}"],
                  "port": "{{portfolio_service_port}}",
                  "path": ["api", "portfolio", "summary"]
                }
              }
            }
          ]
        },
        {
          "name": "üöÄ Complete Trading Flow Test",
          "description": "Full end-to-end trading flow with portfolio integration",
          "item": [
            {
              "name": "1. Login (Use Existing User)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"password123\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}:{{gateway_port}}/api/auth/signin",
                  "host": ["{{base_url}}"],
                  "port": "{{gateway_port}}",
                  "path": ["api", "auth", "signin"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('jwt_token', response.accessToken);",
                      "    pm.collectionVariables.set('username', response.username);",
                      "    pm.collectionVariables.set('user_id', response.id);",
                      "    pm.test('Login successful', function () {",
                      "        pm.expect(response.accessToken).to.not.be.undefined;",
                      "    });",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "2. Check Initial Wallet Balance",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}:{{wallet_service_port}}/api/wallet/balance",
                  "host": ["{{base_url}}"],
                  "port": "{{wallet_service_port}}",
                  "path": ["api", "wallet", "balance"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Wallet balance retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const balance = parseFloat(pm.response.text());",
                      "    pm.expect(balance).to.be.a('number');",
                      "    pm.collectionVariables.set('initial_balance', balance);",
                      "    console.log('Initial wallet balance: $' + balance);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "3. Get Market Data (BTC)",
              "request": {
                "method": "GET",
                "url": {
                  "raw": "{{base_url}}:{{market_service_port}}/api/assets/BTC",
                  "host": ["{{base_url}}"],
                  "port": "{{market_service_port}}",
                  "path": ["api", "assets", "BTC"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('BTC market data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const btc = pm.response.json();",
                      "    pm.expect(btc.currentPrice).to.be.a('number');",
                      "    pm.collectionVariables.set('btc_price', btc.currentPrice);",
                      "    console.log('BTC Price: $' + btc.currentPrice);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "4. Buy 0.001 BTC",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"symbol\": \"BTC\",\n  \"quantity\": 0.001,\n  \"description\": \"Test buy with portfolio integration\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}:{{trading_service_port}}/api/trade/buy",
                  "host": ["{{base_url}}"],
                  "port": "{{trading_service_port}}",
                  "path": ["api", "trade", "buy"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('BTC buy successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.assetSymbol).to.eql('BTC');",
                      "    pm.expect(response.quantity).to.eql(0.001);",
                      "    pm.expect(response.transactionType).to.eql('BUY');",
                      "    console.log('Purchased: ' + response.quantity + ' ' + response.assetSymbol);",
                      "    console.log('Total cost: $' + response.totalAmount);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "5. Check Updated Wallet Balance",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}:{{wallet_service_port}}/api/wallet/balance",
                  "host": ["{{base_url}}"],
                  "port": "{{wallet_service_port}}",
                  "path": ["api", "wallet", "balance"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Wallet balance updated after purchase', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const newBalance = parseFloat(pm.response.text());",
                      "    const initialBalance = parseFloat(pm.collectionVariables.get('initial_balance'));",
                      "    pm.expect(newBalance).to.be.below(initialBalance);",
                      "    console.log('New balance: $' + newBalance + ' (decreased by $' + (initialBalance - newBalance).toFixed(2) + ')');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "6. Check Portfolio (Should Show BTC)",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}:{{portfolio_service_port}}/api/portfolio",
                  "host": ["{{base_url}}"],
                  "port": "{{portfolio_service_port}}",
                  "path": ["api", "portfolio"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Portfolio shows BTC position', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const portfolio = pm.response.json();",
                      "    pm.expect(portfolio).to.be.an('array');",
                      "    const btcPosition = portfolio.find(p => p.asset && p.asset.symbol === 'BTC');",
                      "    pm.expect(btcPosition).to.not.be.undefined;",
                      "    pm.expect(btcPosition.quantity).to.eql(0.001);",
                      "    console.log('Portfolio BTC quantity: ' + btcPosition.quantity);",
                      "    console.log('Portfolio BTC value: $' + btcPosition.currentValue);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "7. Sell 0.0005 BTC",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"symbol\": \"BTC\",\n  \"quantity\": 0.0005,\n  \"description\": \"Test sell with portfolio integration\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}:{{trading_service_port}}/api/trade/sell",
                  "host": ["{{base_url}}"],
                  "port": "{{trading_service_port}}",
                  "path": ["api", "trade", "sell"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('BTC sell successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.assetSymbol).to.eql('BTC');",
                      "    pm.expect(response.quantity).to.eql(0.0005);",
                      "    pm.expect(response.transactionType).to.eql('SELL');",
                      "    console.log('Sold: ' + response.quantity + ' ' + response.assetSymbol);",
                      "    console.log('Sale amount: $' + response.totalAmount);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "8. Check Final Portfolio (Should Show 0.0005 BTC)",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}:{{portfolio_service_port}}/api/portfolio",
                  "host": ["{{base_url}}"],
                  "port": "{{portfolio_service_port}}",
                  "path": ["api", "portfolio"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Portfolio shows remaining BTC position', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const portfolio = pm.response.json();",
                      "    const btcPosition = portfolio.find(p => p.asset && p.asset.symbol === 'BTC');",
                      "    if (btcPosition) {",
                      "        pm.expect(btcPosition.quantity).to.eql(0.0005);",
                      "        console.log('Remaining BTC quantity: ' + btcPosition.quantity);",
                      "        console.log('Remaining BTC value: $' + btcPosition.currentValue);",
                      "    } else {",
                      "        pm.expect.fail('BTC position should still exist with 0.0005 quantity');",
                      "    }",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "9. Check Trading Transactions",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}:{{trading_service_port}}/api/transactions",
                  "host": ["{{base_url}}"],
                  "port": "{{trading_service_port}}",
                  "path": ["api", "transactions"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Trading transactions recorded', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const transactions = pm.response.json();",
                      "    pm.expect(transactions).to.be.an('array');",
                      "    pm.expect(transactions.length).to.be.at.least(2);",
                      "    ",
                      "    const buyTx = transactions.find(t => t.type === 'BUY');",
                      "    const sellTx = transactions.find(t => t.type === 'SELL');",
                      "    ",
                      "    pm.expect(buyTx).to.not.be.undefined;",
                      "    pm.expect(sellTx).to.not.be.undefined;",
                      "    ",
                      "    console.log('Total transactions: ' + transactions.length);",
                      "});"
                    ]
                  }
                }
              ]
            }
                     ]
        }
      ]
    }
  ]
} 