{"ast":null,"code":"import api from './api';\n\n/**\n * Tüm kripto paraları getiren servis fonksiyonu\n * @returns {Promise} - Kripto para listesi içeren promise\n */\nexport const getAllCryptoCurrencies = async () => {\n  try {\n    const response = await api.get('/api/crypto');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching cryptocurrencies:', error);\n    throw error;\n  }\n};\n\n/**\n * Kripto para verilerini güncellemek için API isteği\n * @returns {Promise} - Güncellenen kripto para listesi içeren promise\n */\nexport const refreshCryptoCurrencies = async () => {\n  try {\n    const response = await api.post('/api/crypto/refresh');\n    return response.data;\n  } catch (error) {\n    console.error('Error refreshing cryptocurrencies:', error);\n    throw error;\n  }\n};\n\n/**\n * Belirli bir kripto parayı ID'ye göre getiren servis\n * @param {string} id - Kripto para ID'si\n * @returns {Promise} - Kripto para bilgisi içeren promise\n */\nexport const getCryptoCurrencyById = async id => {\n  try {\n    const response = await api.get(`/api/crypto/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching cryptocurrency with id ${id}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["api","getAllCryptoCurrencies","response","get","data","error","console","refreshCryptoCurrencies","post","getCryptoCurrencyById","id"],"sources":["/Users/bahadircolak/projects/croesus/frontend/src/services/cryptoService.js"],"sourcesContent":["import api from './api';\n\n/**\n * Tüm kripto paraları getiren servis fonksiyonu\n * @returns {Promise} - Kripto para listesi içeren promise\n */\nexport const getAllCryptoCurrencies = async () => {\n  try {\n    const response = await api.get('/api/crypto');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching cryptocurrencies:', error);\n    throw error;\n  }\n};\n\n/**\n * Kripto para verilerini güncellemek için API isteği\n * @returns {Promise} - Güncellenen kripto para listesi içeren promise\n */\nexport const refreshCryptoCurrencies = async () => {\n  try {\n    const response = await api.post('/api/crypto/refresh');\n    return response.data;\n  } catch (error) {\n    console.error('Error refreshing cryptocurrencies:', error);\n    throw error;\n  }\n};\n\n/**\n * Belirli bir kripto parayı ID'ye göre getiren servis\n * @param {string} id - Kripto para ID'si\n * @returns {Promise} - Kripto para bilgisi içeren promise\n */\nexport const getCryptoCurrencyById = async (id) => {\n  try {\n    const response = await api.get(`/api/crypto/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching cryptocurrency with id ${id}:`, error);\n    throw error;\n  }\n}; "],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAG,MAAAA,CAAA,KAAY;EAChD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,aAAa,CAAC;IAC7C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAME,uBAAuB,GAAG,MAAAA,CAAA,KAAY;EACjD,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMF,GAAG,CAACQ,IAAI,CAAC,qBAAqB,CAAC;IACtD,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,qBAAqB,GAAG,MAAOC,EAAE,IAAK;EACjD,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,eAAeO,EAAE,EAAE,CAAC;IACnD,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yCAAyCK,EAAE,GAAG,EAAEL,KAAK,CAAC;IACpE,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}